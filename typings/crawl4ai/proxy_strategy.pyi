"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional
from abc import ABC, abstractmethod

class ProxyConfig:
    def __init__(self, server: str, username: Optional[str] = ..., password: Optional[str] = ..., ip: Optional[str] = ...) -> None:
        """Configuration class for a single proxy.
        
        Args:
            server: Proxy server URL (e.g., "http://127.0.0.1:8080")
            username: Optional username for proxy authentication
            password: Optional password for proxy authentication
            ip: Optional IP address for verification purposes
        """
        ...
    
    @staticmethod
    def from_string(proxy_str: str) -> ProxyConfig:
        """Create a ProxyConfig from a string in the format 'ip:port:username:password'."""
        ...
    
    @staticmethod
    def from_dict(proxy_dict: Dict) -> ProxyConfig:
        """Create a ProxyConfig from a dictionary."""
        ...
    
    @staticmethod
    def from_env(env_var: str = ...) -> List[ProxyConfig]:
        """Load proxies from environment variable.
        
        Args:
            env_var: Name of environment variable containing comma-separated proxy strings
            
        Returns:
            List of ProxyConfig objects
        """
        ...
    
    def to_dict(self) -> Dict:
        """Convert to dictionary representation."""
        ...
    
    def clone(self, **kwargs) -> ProxyConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            ProxyConfig: A new instance with the specified updates
        """
        ...
    


class ProxyRotationStrategy(ABC):
    """Base abstract class for proxy rotation strategies"""
    @abstractmethod
    async def get_next_proxy(self) -> Optional[ProxyConfig]:
        """Get next proxy configuration from the strategy"""
        ...
    
    @abstractmethod
    def add_proxies(self, proxies: List[ProxyConfig]): # -> None:
        """Add proxy configurations to the strategy"""
        ...
    


class RoundRobinProxyStrategy:
    """Simple round-robin proxy rotation strategy using ProxyConfig objects"""
    def __init__(self, proxies: List[ProxyConfig] = ...) -> None:
        """
        Initialize with optional list of proxy configurations
        
        Args:
            proxies: List of ProxyConfig objects
        """
        ...
    
    def add_proxies(self, proxies: List[ProxyConfig]): # -> None:
        """Add new proxies to the rotation pool"""
        ...
    
    async def get_next_proxy(self) -> Optional[ProxyConfig]:
        """Get next proxy in round-robin fashion"""
        ...
    


