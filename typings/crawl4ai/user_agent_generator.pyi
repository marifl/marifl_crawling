"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Literal, Optional, Tuple, Union
from abc import ABC, abstractmethod

class UAGen(ABC):
    @abstractmethod
    def generate(self, browsers: Optional[List[str]] = ..., os: Optional[Union[str, List[str]]] = ..., min_version: float = ..., platforms: Optional[Union[str, List[str]]] = ..., pct_threshold: Optional[float] = ..., fallback: str = ...) -> Union[str, Dict]:
        ...
    
    @staticmethod
    def generate_client_hints(user_agent: str) -> str:
        """Generate Sec-CH-UA header value based on user agent string"""
        ...
    


class ValidUAGenerator(UAGen):
    def __init__(self) -> None:
        ...
    
    def generate(self, browsers: Optional[List[str]] = ..., os: Optional[Union[str, List[str]]] = ..., min_version: float = ..., platforms: Optional[Union[str, List[str]]] = ..., pct_threshold: Optional[float] = ..., fallback: str = ...) -> str:
        ...
    


class OnlineUAGenerator(UAGen):
    def __init__(self) -> None:
        ...
    
    def generate(self, browsers: Optional[List[str]] = ..., os: Optional[Union[str, List[str]]] = ..., min_version: float = ..., platforms: Optional[Union[str, List[str]]] = ..., pct_threshold: Optional[float] = ..., fallback: str = ...) -> Dict:
        ...
    


class UserAgentGenerator:
    """
    Generate random user agents with specified constraints.

    Attributes:
        desktop_platforms (dict): A dictionary of possible desktop platforms and their corresponding user agent strings.
        mobile_platforms (dict): A dictionary of possible mobile platforms and their corresponding user agent strings.
        browser_combinations (dict): A dictionary of possible browser combinations and their corresponding user agent strings.
        rendering_engines (dict): A dictionary of possible rendering engines and their corresponding user agent strings.
        chrome_versions (list): A list of possible Chrome browser versions.
        firefox_versions (list): A list of possible Firefox browser versions.
        edge_versions (list): A list of possible Edge browser versions.
        safari_versions (list): A list of possible Safari browser versions.
        ios_versions (list): A list of possible iOS browser versions.
        android_versions (list): A list of possible Android browser versions.

        Methods:
            generate_user_agent(
                platform: Literal["desktop", "mobile"] = "desktop",
                browser: str = "chrome",
                rendering_engine: str = "chrome_webkit",
                chrome_version: Optional[str] = None,
                firefox_version: Optional[str] = None,
                edge_version: Optional[str] = None,
                safari_version: Optional[str] = None,
                ios_version: Optional[str] = None,
                android_version: Optional[str] = None
            ): Generates a random user agent string based on the specified parameters.
    """
    def __init__(self) -> None:
        ...
    
    def get_browser_stack(self, num_browsers: int = ...) -> List[str]:
        """
        Get a valid combination of browser versions.

        How it works:
        1. Check if the number of browsers is supported.
        2. Randomly choose a combination of browsers.
        3. Iterate through the combination and add browser versions.
        4. Return the browser stack.

        Args:
            num_browsers: Number of browser specifications (1-3)

        Returns:
            List[str]: A list of browser versions.
        """
        ...
    
    def generate(self, device_type: Optional[Literal["desktop", "mobile"]] = ..., os_type: Optional[str] = ..., device_brand: Optional[str] = ..., browser_type: Optional[Literal["chrome", "edge", "safari", "firefox"]] = ..., num_browsers: int = ...) -> str:
        """
        Generate a random user agent with specified constraints.

        Args:
            device_type: 'desktop' or 'mobile'
            os_type: 'windows', 'macos', 'linux', 'android', 'ios'
            device_brand: Specific device brand
            browser_type: 'chrome', 'edge', 'safari', or 'firefox'
            num_browsers: Number of browser specifications (1-3)
        """
        ...
    
    def generate_with_client_hints(self, **kwargs) -> Tuple[str, str]:
        """Generate both user agent and matching client hints"""
        ...
    
    def get_random_platform(self, device_type, os_type, device_brand): # -> str:
        """Helper method to get random platform based on constraints"""
        ...
    
    def parse_user_agent(self, user_agent: str) -> Dict[str, str]:
        """Parse a user agent string to extract browser and version information"""
        ...
    
    def generate_client_hints(self, user_agent: str) -> str:
        """Generate Sec-CH-UA header value based on user agent string"""
        ...
    


if __name__ == "__main__":
    generator = ...
    ua = ...
    generator = ...
    ua = ...
