"""
This type stub file was generated by pyright.
"""

from .extraction_strategy import ExtractionStrategy
from .chunking_strategy import ChunkingStrategy
from .markdown_generation_strategy import MarkdownGenerationStrategy
from .content_scraping_strategy import ContentScrapingStrategy
from .deep_crawling import DeepCrawlStrategy
from .cache_context import CacheMode
from .proxy_strategy import ProxyRotationStrategy
from typing import Any, Dict, List, Optional, Union

def to_serializable_dict(obj: Any, ignore_default_value: bool = ...) -> Dict:
    """
    Recursively convert an object to a serializable dictionary using {type, params} structure
    for complex objects.
    """
    ...

def from_serializable_dict(data: Any) -> Any:
    """
    Recursively convert a serializable dictionary back to an object instance.
    """
    ...

def is_empty_value(value: Any) -> bool:
    """Check if a value is effectively empty/null."""
    ...

class GeolocationConfig:
    def __init__(self, latitude: float, longitude: float, accuracy: Optional[float] = ...) -> None:
        """Configuration class for geolocation settings.
        
        Args:
            latitude: Latitude coordinate (e.g., 37.7749)
            longitude: Longitude coordinate (e.g., -122.4194)
            accuracy: Accuracy in meters. Default: 0.0
        """
        ...
    
    @staticmethod
    def from_dict(geo_dict: Dict) -> GeolocationConfig:
        """Create a GeolocationConfig from a dictionary."""
        ...
    
    def to_dict(self) -> Dict:
        """Convert to dictionary representation."""
        ...
    
    def clone(self, **kwargs) -> GeolocationConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            GeolocationConfig: A new instance with the specified updates
        """
        ...
    


class ProxyConfig:
    def __init__(self, server: str, username: Optional[str] = ..., password: Optional[str] = ..., ip: Optional[str] = ...) -> None:
        """Configuration class for a single proxy.
        
        Args:
            server: Proxy server URL (e.g., "http://127.0.0.1:8080")
            username: Optional username for proxy authentication
            password: Optional password for proxy authentication
            ip: Optional IP address for verification purposes
        """
        ...
    
    @staticmethod
    def from_string(proxy_str: str) -> ProxyConfig:
        """Create a ProxyConfig from a string in the format 'ip:port:username:password'."""
        ...
    
    @staticmethod
    def from_dict(proxy_dict: Dict) -> ProxyConfig:
        """Create a ProxyConfig from a dictionary."""
        ...
    
    @staticmethod
    def from_env(env_var: str = ...) -> List[ProxyConfig]:
        """Load proxies from environment variable.
        
        Args:
            env_var: Name of environment variable containing comma-separated proxy strings
            
        Returns:
            List of ProxyConfig objects
        """
        ...
    
    def to_dict(self) -> Dict:
        """Convert to dictionary representation."""
        ...
    
    def clone(self, **kwargs) -> ProxyConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            ProxyConfig: A new instance with the specified updates
        """
        ...
    


class BrowserConfig:
    """
    Configuration class for setting up a browser instance and its context in AsyncPlaywrightCrawlerStrategy.

    This class centralizes all parameters that affect browser and context creation. Instead of passing
    scattered keyword arguments, users can instantiate and modify this configuration object. The crawler
    code will then reference these settings to initialize the browser in a consistent, documented manner.

    Attributes:
        browser_type (str): The type of browser to launch. Supported values: "chromium", "firefox", "webkit".
                            Default: "chromium".
        headless (bool): Whether to run the browser in headless mode (no visible GUI).
                         Default: True.
        browser_mode (str): Determines how the browser should be initialized:
                           "builtin" - use the builtin CDP browser running in background
                           "dedicated" - create a new dedicated browser instance each time
                           "cdp" - use explicit CDP settings provided in cdp_url
                           "docker" - run browser in Docker container with isolation
                           Default: "dedicated"
        use_managed_browser (bool): Launch the browser using a managed approach (e.g., via CDP), allowing
                                    advanced manipulation. Default: False.
        cdp_url (str): URL for the Chrome DevTools Protocol (CDP) endpoint. Default: "ws://localhost:9222/devtools/browser/".
        debugging_port (int): Port for the browser debugging protocol. Default: 9222.
        use_persistent_context (bool): Use a persistent browser context (like a persistent profile).
                                       Automatically sets use_managed_browser=True. Default: False.
        user_data_dir (str or None): Path to a user data directory for persistent sessions. If None, a
                                     temporary directory may be used. Default: None.
        chrome_channel (str): The Chrome channel to launch (e.g., "chrome", "msedge"). Only applies if browser_type
                              is "chromium". Default: "chromium".
        channel (str): The channel to launch (e.g., "chromium", "chrome", "msedge"). Only applies if browser_type
                              is "chromium". Default: "chromium".
        proxy (Optional[str]): Proxy server URL (e.g., "http://username:password@proxy:port"). If None, no proxy is used.
                             Default: None.
        proxy_config (ProxyConfig or dict or None): Detailed proxy configuration, e.g. {"server": "...", "username": "..."}.
                                     If None, no additional proxy config. Default: None.
        viewport_width (int): Default viewport width for pages. Default: 1080.
        viewport_height (int): Default viewport height for pages. Default: 600.
        viewport (dict): Default viewport dimensions for pages. If set, overrides viewport_width and viewport_height.
                         Default: None.
        verbose (bool): Enable verbose logging.
                        Default: True.
        accept_downloads (bool): Whether to allow file downloads. If True, requires a downloads_path.
                                 Default: False.
        downloads_path (str or None): Directory to store downloaded files. If None and accept_downloads is True,
                                      a default path will be created. Default: None.
        storage_state (str or dict or None): An in-memory storage state (cookies, localStorage).
                                             Default: None.
        ignore_https_errors (bool): Ignore HTTPS certificate errors. Default: True.
        java_script_enabled (bool): Enable JavaScript execution in pages. Default: True.
        cookies (list): List of cookies to add to the browser context. Each cookie is a dict with fields like
                        {"name": "...", "value": "...", "url": "..."}.
                        Default: [].
        headers (dict): Extra HTTP headers to apply to all requests in this context.
                        Default: {}.
        user_agent (str): Custom User-Agent string to use. Default: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                           "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36".
        user_agent_mode (str or None): Mode for generating the user agent (e.g., "random"). If None, use the provided
                                       user_agent as-is. Default: None.
        user_agent_generator_config (dict or None): Configuration for user agent generation if user_agent_mode is set.
                                                    Default: None.
        text_mode (bool): If True, disables images and other rich content for potentially faster load times.
                          Default: False.
        light_mode (bool): Disables certain background features for performance gains. Default: False.
        extra_args (list): Additional command-line arguments passed to the browser.
                           Default: [].
    """
    def __init__(self, browser_type: str = ..., headless: bool = ..., browser_mode: str = ..., use_managed_browser: bool = ..., cdp_url: str = ..., use_persistent_context: bool = ..., user_data_dir: str = ..., chrome_channel: str = ..., channel: str = ..., proxy: str = ..., proxy_config: Union[ProxyConfig, dict, None] = ..., viewport_width: int = ..., viewport_height: int = ..., viewport: dict = ..., accept_downloads: bool = ..., downloads_path: str = ..., storage_state: Union[str, dict, None] = ..., ignore_https_errors: bool = ..., java_script_enabled: bool = ..., sleep_on_close: bool = ..., verbose: bool = ..., cookies: list = ..., headers: dict = ..., user_agent: str = ..., user_agent_mode: str = ..., user_agent_generator_config: dict = ..., text_mode: bool = ..., light_mode: bool = ..., extra_args: list = ..., debugging_port: int = ..., host: str = ...) -> None:
        ...
    
    @staticmethod
    def from_kwargs(kwargs: dict) -> BrowserConfig:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def clone(self, **kwargs): # -> BrowserConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            BrowserConfig: A new instance with the specified updates
        """
        ...
    
    def dump(self) -> dict:
        ...
    
    @staticmethod
    def load(data: dict) -> BrowserConfig:
        ...
    


class HTTPCrawlerConfig:
    """HTTP-specific crawler configuration"""
    method: str = ...
    headers: Optional[Dict[str, str]] = ...
    data: Optional[Dict[str, Any]] = ...
    json: Optional[Dict[str, Any]] = ...
    follow_redirects: bool = ...
    verify_ssl: bool = ...
    def __init__(self, method: str = ..., headers: Optional[Dict[str, str]] = ..., data: Optional[Dict[str, Any]] = ..., json: Optional[Dict[str, Any]] = ..., follow_redirects: bool = ..., verify_ssl: bool = ...) -> None:
        ...
    
    @staticmethod
    def from_kwargs(kwargs: dict) -> HTTPCrawlerConfig:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def clone(self, **kwargs): # -> HTTPCrawlerConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            HTTPCrawlerConfig: A new instance with the specified updates
        """
        ...
    
    def dump(self) -> dict:
        ...
    
    @staticmethod
    def load(data: dict) -> HTTPCrawlerConfig:
        ...
    


class CrawlerRunConfig:
    _UNWANTED_PROPS = ...
    def __init__(self, word_count_threshold: int = ..., extraction_strategy: ExtractionStrategy = ..., chunking_strategy: ChunkingStrategy = ..., markdown_generator: MarkdownGenerationStrategy = ..., only_text: bool = ..., css_selector: str = ..., target_elements: List[str] = ..., excluded_tags: list = ..., excluded_selector: str = ..., keep_data_attributes: bool = ..., keep_attrs: list = ..., remove_forms: bool = ..., prettiify: bool = ..., parser_type: str = ..., scraping_strategy: ContentScrapingStrategy = ..., proxy_config: Union[ProxyConfig, dict, None] = ..., proxy_rotation_strategy: Optional[ProxyRotationStrategy] = ..., locale: Optional[str] = ..., timezone_id: Optional[str] = ..., geolocation: Optional[GeolocationConfig] = ..., fetch_ssl_certificate: bool = ..., cache_mode: CacheMode = ..., session_id: str = ..., bypass_cache: bool = ..., disable_cache: bool = ..., no_cache_read: bool = ..., no_cache_write: bool = ..., shared_data: dict = ..., wait_until: str = ..., page_timeout: int = ..., wait_for: str = ..., wait_for_images: bool = ..., delay_before_return_html: float = ..., mean_delay: float = ..., max_range: float = ..., semaphore_count: int = ..., js_code: Union[str, List[str]] = ..., js_only: bool = ..., ignore_body_visibility: bool = ..., scan_full_page: bool = ..., scroll_delay: float = ..., process_iframes: bool = ..., remove_overlay_elements: bool = ..., simulate_user: bool = ..., override_navigator: bool = ..., magic: bool = ..., adjust_viewport_to_content: bool = ..., screenshot: bool = ..., screenshot_wait_for: float = ..., screenshot_height_threshold: int = ..., pdf: bool = ..., capture_mhtml: bool = ..., image_description_min_word_threshold: int = ..., image_score_threshold: int = ..., table_score_threshold: int = ..., exclude_external_images: bool = ..., exclude_all_images: bool = ..., exclude_social_media_domains: list = ..., exclude_external_links: bool = ..., exclude_social_media_links: bool = ..., exclude_domains: list = ..., exclude_internal_links: bool = ..., verbose: bool = ..., log_console: bool = ..., capture_network_requests: bool = ..., capture_console_messages: bool = ..., method: str = ..., stream: bool = ..., url: str = ..., check_robots_txt: bool = ..., user_agent: str = ..., user_agent_mode: str = ..., user_agent_generator_config: dict = ..., deep_crawl_strategy: Optional[DeepCrawlStrategy] = ..., experimental: Dict[str, Any] = ...) -> None:
        ...
    
    def __getattr__(self, name):
        """Handle attribute access."""
        ...
    
    def __setattr__(self, name, value): # -> None:
        """Handle attribute setting."""
        ...
    
    @staticmethod
    def from_kwargs(kwargs: dict) -> CrawlerRunConfig:
        ...
    
    def dump(self) -> dict:
        ...
    
    @staticmethod
    def load(data: dict) -> CrawlerRunConfig:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def clone(self, **kwargs): # -> CrawlerRunConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            CrawlerRunConfig: A new instance with the specified updates

        Example:
            ```python
            # Create a new config with streaming enabled
            stream_config = config.clone(stream=True)

            # Create a new config with multiple updates
            new_config = config.clone(
                stream=True,
                cache_mode=CacheMode.BYPASS,
                verbose=True
            )
            ```
        """
        ...
    


class LLMConfig:
    def __init__(self, provider: str = ..., api_token: Optional[str] = ..., base_url: Optional[str] = ..., temprature: Optional[float] = ..., max_tokens: Optional[int] = ..., top_p: Optional[float] = ..., frequency_penalty: Optional[float] = ..., presence_penalty: Optional[float] = ..., stop: Optional[List[str]] = ..., n: Optional[int] = ...) -> None:
        """Configuaration class for LLM provider and API token."""
        ...
    
    @staticmethod
    def from_kwargs(kwargs: dict) -> LLMConfig:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def clone(self, **kwargs): # -> LLMConfig:
        """Create a copy of this configuration with updated values.

        Args:
            **kwargs: Key-value pairs of configuration options to update

        Returns:
            llm_config: A new instance with the specified updates
        """
        ...
    


