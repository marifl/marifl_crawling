"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Pattern, Union
from functools import lru_cache
from dataclasses import dataclass

@dataclass
class FilterStats:
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @property
    def total_urls(self): # -> int:
        ...
    
    @property
    def passed_urls(self): # -> int:
        ...
    
    @property
    def rejected_urls(self): # -> int:
        ...
    


class URLFilter(ABC):
    """Optimized base filter class"""
    __slots__ = ...
    def __init__(self, name: str = ...) -> None:
        ...
    
    @property
    def logger(self): # -> Logger | None:
        ...
    
    @abstractmethod
    def apply(self, url: str) -> bool:
        ...
    


class FilterChain:
    """Optimized filter chain"""
    __slots__ = ...
    def __init__(self, filters: List[URLFilter] = ...) -> None:
        ...
    
    @property
    def logger(self): # -> Logger | None:
        ...
    
    def add_filter(self, filter_: URLFilter) -> FilterChain:
        """Add a filter to the chain"""
        ...
    
    async def apply(self, url: str) -> bool:
        """Apply all filters concurrently when possible"""
        ...
    


class URLPatternFilter(URLFilter):
    """Pattern filter balancing speed and completeness"""
    __slots__ = ...
    PATTERN_TYPES = ...
    def __init__(self, patterns: Union[str, Pattern, List[Union[str, Pattern]]], use_glob: bool = ..., reverse: bool = ...) -> None:
        ...
    
    @lru_cache(maxsize=10000)
    def apply(self, url: str) -> bool:
        ...
    


class ContentTypeFilter(URLFilter):
    """Optimized content type filter using fast lookups"""
    __slots__ = ...
    _MIME_MAP = ...
    def __init__(self, allowed_types: Union[str, List[str]], check_extension: bool = ..., ext_map: Dict[str, str] = ...) -> None:
        ...
    
    def apply(self, url: str) -> bool:
        """Fast extension check with caching"""
        ...
    


class DomainFilter(URLFilter):
    """Optimized domain filter with fast lookups and caching"""
    __slots__ = ...
    _DOMAIN_REGEX = ...
    def __init__(self, allowed_domains: Union[str, List[str]] = ..., blocked_domains: Union[str, List[str]] = ...) -> None:
        ...
    
    def apply(self, url: str) -> bool:
        """Optimized domain checking with early returns"""
        ...
    


class ContentRelevanceFilter(URLFilter):
    """BM25-based relevance filter using head section content"""
    __slots__ = ...
    def __init__(self, query: str, threshold: float, k1: float = ..., b: float = ..., avgdl: int = ...) -> None:
        ...
    
    async def apply(self, url: str) -> bool:
        ...
    


class SEOFilter(URLFilter):
    """Quantitative SEO quality assessment filter using head section analysis"""
    __slots__ = ...
    DEFAULT_WEIGHTS = ...
    def __init__(self, threshold: float = ..., keywords: List[str] = ..., weights: Dict[str, float] = ...) -> None:
        ...
    
    async def apply(self, url: str) -> bool:
        ...
    


