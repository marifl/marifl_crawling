"""
This type stub file was generated by pyright.
"""

from abc import ABC
from typing import Dict, List

PLATFORM = ...
_SCORE_LOOKUP = ...
_FRESHNESS_SCORES = ...
class ScoringStats:
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def update(self, score: float) -> None:
        """Optimized update with minimal operations"""
        ...
    
    def get_average(self) -> float:
        """Direct calculation instead of property"""
        ...
    
    def get_min(self) -> float:
        """Lazy min calculation"""
        ...
    
    def get_max(self) -> float:
        """Lazy max calculation"""
        ...
    


class URLScorer(ABC):
    __slots__ = ...
    def __init__(self, weight: float = ...) -> None:
        ...
    
    def score(self, url: str) -> float:
        """Calculate weighted score with minimal overhead."""
        ...
    
    @property
    def stats(self): # -> ScoringStats:
        """Access to scoring statistics."""
        ...
    
    @property
    def weight(self): # -> float:
        ...
    


class CompositeScorer(URLScorer):
    __slots__ = ...
    def __init__(self, scorers: List[URLScorer], normalize: bool = ...) -> None:
        """Initialize composite scorer combining multiple scoring strategies.
        
        Optimized for:
        - Fast parallel scoring
        - Memory efficient score aggregation
        - Quick short-circuit conditions
        - Pre-allocated arrays
        
        Args:
            scorers: List of scoring strategies to combine
            normalize: Whether to normalize final score by scorer count
        """
        ...
    
    def score(self, url: str) -> float:
        """Public scoring interface with stats tracking.
        
        Args:
            url: URL to score
            
        Returns:
            Final combined score
        """
        ...
    


class KeywordRelevanceScorer(URLScorer):
    __slots__ = ...
    def __init__(self, keywords: List[str], weight: float = ..., case_sensitive: bool = ...) -> None:
        ...
    


class PathDepthScorer(URLScorer):
    __slots__ = ...
    def __init__(self, optimal_depth: int = ..., weight: float = ...) -> None:
        ...
    


class ContentTypeScorer(URLScorer):
    __slots__ = ...
    def __init__(self, type_weights: Dict[str, float], weight: float = ...) -> None:
        """Initialize scorer with type weights map.
        
        Args:
            type_weights: Dict mapping file extensions/patterns to scores (e.g. {'.html$': 1.0})
            weight: Overall weight multiplier for this scorer
        """
        ...
    


class FreshnessScorer(URLScorer):
    __slots__ = ...
    def __init__(self, weight: float = ..., current_year: int = ...) -> None:
        """Initialize freshness scorer.
        
        Extracts and scores dates from URLs using format:
        - YYYY/MM/DD 
        - YYYY-MM-DD
        - YYYY_MM_DD
        - YYYY (year only)
        
        Args:
            weight: Score multiplier
            current_year: Year to calculate freshness against (default 2024)
        """
        ...
    


class DomainAuthorityScorer(URLScorer):
    __slots__ = ...
    def __init__(self, domain_weights: Dict[str, float], default_weight: float = ..., weight: float = ...) -> None:
        """Initialize domain authority scorer.
        
        Args:
            domain_weights: Dict mapping domains to authority scores
            default_weight: Score for unknown domains
            weight: Overall scorer weight multiplier
            
        Example:
            {
                'python.org': 1.0,
                'github.com': 0.9,
                'medium.com': 0.7
            }
        """
        ...
    


