"""
This type stub file was generated by pyright.
"""

from typing import Any, AsyncGenerator, Dict, List, Optional, Union
from .async_configs import BrowserConfig, CrawlerRunConfig
from .models import CrawlResult

class Crawl4aiClientError(Exception):
    """Base exception for Crawl4ai Docker client errors."""
    ...


class ConnectionError(Crawl4aiClientError):
    """Raised when connection to the Docker server fails."""
    ...


class RequestError(Crawl4aiClientError):
    """Raised when the server returns an error response."""
    ...


class Crawl4aiDockerClient:
    """Client for interacting with Crawl4AI Docker server with token authentication."""
    def __init__(self, base_url: str = ..., timeout: float = ..., verify_ssl: bool = ..., verbose: bool = ..., log_file: Optional[str] = ...) -> None:
        ...
    
    async def authenticate(self, email: str) -> None:
        """Authenticate with the server and store the token."""
        ...
    
    async def crawl(self, urls: List[str], browser_config: Optional[BrowserConfig] = ..., crawler_config: Optional[CrawlerRunConfig] = ...) -> Union[CrawlResult, List[CrawlResult], AsyncGenerator[CrawlResult, None]]:
        """Execute a crawl operation."""
        ...
    
    async def get_schema(self) -> Dict[str, Any]:
        """Retrieve configuration schemas."""
        ...
    
    async def close(self) -> None:
        """Close the HTTP client session."""
        ...
    
    async def __aenter__(self) -> Crawl4aiDockerClient:
        ...
    
    async def __aexit__(self, exc_type: Optional[type], exc_val: Optional[Exception], exc_tb: Optional[Any]) -> None:
        ...
    


async def main(): # -> None:
    ...

if __name__ == "__main__":
    ...
